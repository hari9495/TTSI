<Activity mc:Ignorable="sap sap2010" x:Class="SPR_Logic_Breakdown_Code_Splitting" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="StrLineStopDetail" Type="InArgument(x:String)" />
    <x:Property Name="ArrBreakDown" Type="OutArgument(s:String[])" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>897,3078</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>SPR_Logic_Breakdown_Code_Splitting_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="44">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Globalization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="46">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap:VirtualizedContainerService.HintSize="893,2913" sap2010:WorkflowViewState.IdRef="Sequence_22">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="851,2821" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <TryCatch.Try>
        <Sequence DisplayName="SPR_Logic_Breakdown_Code_Splitting" sap:VirtualizedContainerService.HintSize="813,2594" sap2010:WorkflowViewState.IdRef="Sequence_20">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="strTemp" />
            <Variable x:TypeArguments="x:String" Name="strSpecialCharacter" />
            <Variable x:TypeArguments="s:String[]" Name="arrTemp" />
            <Variable x:TypeArguments="x:String" Name="strTimeTemp" />
            <Variable x:TypeArguments="s:DateTime" Name="timeBreakDownStart" />
            <Variable x:TypeArguments="s:DateTime" Name="timeBreakDownEnd" />
            <Variable x:TypeArguments="x:Double" Name="dblTimeDifference" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Assign - Array Initialization" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_43">
            <Assign.To>
              <OutArgument x:TypeArguments="s:String[]">[ArrBreakDown]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="s:String[]">[New String(){"","","","",""}]</InArgument>
            </Assign.Value>
          </Assign>
          <Sequence DisplayName="Removing space, tab, new line" sap:VirtualizedContainerService.HintSize="771,66" sap2010:WorkflowViewState.IdRef="Sequence_18">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign - Remove Space" sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_44">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[strTemp]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[StrLineStopDetail.Replace(" ","")]</InArgument>
              </Assign.Value>
            </Assign>
            <If Condition="[System.Text.RegularExpressions.Regex.Match(StrTemp, &quot;\t&quot;).Value&lt;&gt;String.Empty]" DisplayName="If Tab Available?" sap:VirtualizedContainerService.HintSize="484,51" sap2010:WorkflowViewState.IdRef="If_11">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Assign - Remove Tab" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_45">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[strTemp]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[StrTemp.Replace(System.Text.RegularExpressions.Regex.Match(StrTemp, "\t").Value,"")]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
            </If>
            <If Condition="[System.Text.RegularExpressions.Regex.Match(StrTemp, &quot;\n&quot;).Value&lt;&gt;String.Empty]" DisplayName="If NewLine Available?" sap:VirtualizedContainerService.HintSize="484,208" sap2010:WorkflowViewState.IdRef="If_12">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Assign - Remove NewLine" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_46">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[strTemp]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[StrTemp.Replace(System.Text.RegularExpressions.Regex.Match(StrTemp, "\n").Value,"")]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
            </If>
          </Sequence>
          <Assign sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_47">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strSpecialCharacter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Match(strTemp,"\W").Value]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign Breakdown Code" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_48">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[ArrBreakDown(0)]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[strTemp.Substring(0,strTemp.IndexOf(strSpecialCharacter)).ToUpper.Trim]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign - Remove Breakdown code" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_49">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[StrLineStopDetail]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[StrLineStopDetail.Replace((StrLineStopDetail.Substring(0,(StrLineStopDetail.IndexOf(strSpecialCharacter))+1)),"")]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign Time Details" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_50">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strTemp]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Match(StrLineStopDetail, "\d?\d[;:]\d{2}\s*[a-zA-Z0-9\s\W]{2,3}\s*\d?\d[;:]\d{2}").Value]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign - Remove Timings" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_51">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[StrLineStopDetail]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[StrLineStopDetail.Replace(strTemp,"")]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_52">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strTimeTemp]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Match(strTemp, "\d?\d[;:]\d{2}").Value]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign - Remove BreakDown Start Time" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_53">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strTemp]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[strTemp.Replace(strTimeTemp,"")]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign BreakDown Start Time" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_54">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[ArrBreakDown(2)]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[strTimeTemp.Replace(System.Text.RegularExpressions.Regex.Match(strTimeTemp, "\W").Value,":")]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_55">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strTimeTemp]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Match(strTemp, "\d?\d[;:]\d{2}").Value]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign BreakDown End Time" sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_56">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[ArrBreakDown(3)]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[strTimeTemp.Replace(System.Text.RegularExpressions.Regex.Match(strTimeTemp, "\W").Value,":")]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_57">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strSpecialCharacter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <Literal x:TypeArguments="x:String" Value="" />
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap:VirtualizedContainerService.HintSize="771,60" sap2010:WorkflowViewState.IdRef="Assign_58">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[strSpecialCharacter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Match(StrLineStopDetail,"[\-=]").Value]</InArgument>
            </Assign.Value>
          </Assign>
          <If Condition="[strSpecialCharacter&lt;&gt;String.Empty]" DisplayName="If - or = not Available?" sap:VirtualizedContainerService.HintSize="771,208" sap2010:WorkflowViewState.IdRef="If_13">
            <If.Then>
              <Assign DisplayName="Assign - Break down Description" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_59">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[ArrBreakDown(1)]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[StrLineStopDetail.Split({Convert.ToChar(strSpecialCharacter)},StringSplitOptions.RemoveEmptyEntries)(0).Trim]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
            <If.Else>
              <Assign DisplayName="Assign - Break down Description" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_60">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[ArrBreakDown(1)]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[StrLineStopDetail]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
          <If Condition="[ArrBreakDown(2)&lt;&gt;String.Empty and ArrBreakDown(3)&lt;&gt;String.Empty]" DisplayName="If Breakdown Start and End Time are Not Empty?" sap:VirtualizedContainerService.HintSize="771,848" sap2010:WorkflowViewState.IdRef="If_15">
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="526,700" sap2010:WorkflowViewState.IdRef="Sequence_19">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_61">
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:DateTime">[timeBreakDownStart]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:DateTime">[Convert.ToDateTime(ArrBreakDown(2))]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_62">
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:DateTime">[timeBreakDownEnd]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:DateTime">[Convert.ToDateTime(ArrBreakDown(3))]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_63">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">[dblTimeDifference]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">[(DateTime.ParseExact(timeBreakDownEnd.ToString, "MM/dd/yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture)-DateTime.ParseExact(timeBreakDownStart.ToString, "MM/dd/yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture)).TotalMinutes]</InArgument>
                  </Assign.Value>
                </Assign>
                <If Condition="[dblTimeDifference&lt;0]" DisplayName="If dblTimeDifference is Negative?" sap:VirtualizedContainerService.HintSize="484,208" sap2010:WorkflowViewState.IdRef="If_14">
                  <If.Then>
                    <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_64">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[dblTimeDifference]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">[dblTimeDifference+1440]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Then>
                </If>
                <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_65">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[ArrBreakDown(4)]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[dblTimeDifference.ToString]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </If.Then>
            <If.Else>
              <Throw Exception="[New Exception(&quot;Wrong BreakDown Code&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_3" />
            </If.Else>
          </If>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="817,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_21">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Error" Message="[&quot;Wrong BreakDown Code&quot;]" />
              <Throw DisplayName="Throw - SysEx" Exception="[New Exception(&quot;Wrong BreakDown Code&quot;)]" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="Throw_4" />
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>